To achieve different themes using JavaScript, React, and CSS, you can follow these steps:

Identify the elements that you want to apply different themes to. This could include buttons, backgrounds, text colors, and other components.

Create separate CSS files for each theme. For example, you could have a "dark-theme.css" and a "light-theme.css" file.

In your React component, import the CSS file(s) that correspond to the selected theme. You can use conditional rendering or state management to determine which theme to load.

Use CSS classes or inline styles to apply the appropriate styles from the imported CSS file(s) to the specific elements in your component. You can manipulate class names or 
style objects based on the selected theme.

Implement a mechanism for the user to switch between themes. This could be done through a dropdown, toggle button, or any other UI element. Use JavaScript and React event 
handling to capture the user's selection.

When the user changes the theme, update the state or trigger a re-render of the component to load the corresponding CSS file and apply the new styles.

By following these steps, you can dynamically apply different themes to your React components using JavaScript and CSS. Make sure to organize your stylesheets and 
class names appropriately to avoid conflicts between different themes.